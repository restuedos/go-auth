basePath: /api
definitions:
  entity.Role:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - RoleAdmin
    - RoleUser
  entity.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        $ref: '#/definitions/entity.Role'
      updated_at:
        type: string
    type: object
  requests.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  requests.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  requests.UpdateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    type: object
  responses.ErrorResponse:
    properties:
      code:
        type: integer
      error:
        type: string
    type: object
  responses.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  responses.TokenResponse:
    properties:
      token:
        type: string
    type: object
  responses.UserResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/entity.User'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample authentication API using Gin and Swaggo.
  title: Go Auth API
  version: "1.0"
paths:
  /admin/users:
    get:
      description: Retrieves a list of all registered users. Only accessible by admin
        users.
      produces:
      - application/json
      responses:
        "200":
          description: List of users retrieved successfully
          schema:
            $ref: '#/definitions/responses.UserResponse'
        "403":
          description: Access denied
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Failed to fetch users
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users (Admin Only)
      tags:
      - admin
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/responses.TokenResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: User login
      tags:
      - auth
  /logout:
    post:
      description: Logs out the user by invalidating their token
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Failed to logout
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout a user
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Creates a new user account and returns a JWT token
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/responses.TokenResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Failed to generate token
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      summary: Register a new user
      tags:
      - auth
  /user/profile:
    delete:
      description: Deletes the authenticated user's account
      responses:
        "200":
          description: Profile deleted successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "500":
          description: Failed to delete profile
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user profile
      tags:
      - user
    get:
      description: Retrieves the authenticated user's profile
      produces:
      - application/json
      responses:
        "200":
          description: User profile retrieved successfully
          schema:
            $ref: '#/definitions/entity.User'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Updates the authenticated user's profile
      parameters:
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Profile updated successfully
          schema:
            $ref: '#/definitions/responses.SuccessResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
        "500":
          description: Failed to update profile
          schema:
            $ref: '#/definitions/responses.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - user
securityDefinitions:
  BearerAuth:
    description: JWT Bearer authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
